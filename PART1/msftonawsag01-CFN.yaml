AWSTemplateFormatVersion: "2010-09-09"
Description: The Microsoft Adventure Game Workshop. WARNING This code is designed for an AWS Workshop. Before considering deployment into a production environment, please conduct static code analysis to identify and address any security issues.

### Parameters
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Deployment Type
        Parameters:
          - DeploymentMode
      - Label:
          default: Web Server file location
        Parameters:
          - S3SourceBucket
      - Label:
          default: Network Settings
        Parameters:
          - VpcCidr
      - Label:
          default: Operating System Settings
        Parameters:
          - LatestAmiId
          - WindowsDomain
          - AdminBoxName
          - SourceServerName
      - Label:
          default: Resource Names and Tagging
        Parameters:
          - PrefixCode
          - RideAlongCode
          - DepartmentTag
          - EnvironmentTag
          - WorkShopTag
Parameters:
  DeploymentMode:
    Type: String
    Description: Choose "workshop" if you want to run the workshop and "completed" if you just want to deploy the finished resources
    Default: "workshop"
    AllowedValues:
      - "workshop"
      - "completed"
  S3SourceBucket:
    Type: String
    Description: Specify the S3 Source bucket you manually created which contain the web server files.
  VpcCidr:
    Type: String
    Default: "10.180"
    Description: Specify the first 2 octets of VPC and subnet CIDR range
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base
    Description: Retrieve the latest Windows AMI for the region using a public Systems Manager Parameter.
  WindowsDomain:
    Type: String
    Default: city.com
    Description: Specify the name of the Managed Microsoft AD domain. Needs to be in the form domain.com
  AdminBoxName:
    Type: String
    Default: city-adminbox
    Description: Enter the hostname of the Windows EC2 administration server. Maximum 15 characters.
  SourceServerName:
    Type: String
    Default: lodge-file
    Description: Enter the hostname of the Windows EC2 server that will serve as the source server for migration. Maximum 15 characters.
  PrefixCode:
    Type: String
    Default: city
    Description: Use a 3 or 4-letter unique prefix for tag values and resource names that are pre-created
  RideAlongCode:
    Type: String
    Default: town
    Description: prefix for Ride Along RDS for SQL Server secret and Windows domain
  DepartmentTag:
    Type: String
    Default: Microsoft on AWS Adventure Game
    Description: Enter Department name tag value
  EnvironmentTag:
    Type: String
    Default: production
    Description: Enter Customer environment tag value
  WorkShopTag:
    Type: String
    Default: mag
    Description: Enter AWS Workshop abbreviated tag value
Conditions:
  Deployall: !Equals [!Ref DeploymentMode, "completed"]
Resources:

### AWS Key Management Service (Scaffold)
  kmskey:
    Type: AWS::KMS::Key
    Properties:
      Description: The Microsoft Adventure Game
      PendingWindowInDays: 7
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            # https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-overview.html
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - "*"
          - Sid: Enable Cloudwatch access to KMS Key
            # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html
            Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource:
              - "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Owner
          Value: !Sub ${DepartmentTag}
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  kmskeyalias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${PrefixCode}-keyvault-cmk
      TargetKeyId: !Ref kmskey

  ### Amazon S3 Bucket (Scaffold)
  s3bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Owner
          Value: !Sub ${DepartmentTag}
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: storage
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  s3bucketpolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: Allow HTTPS only
            Effect: Deny
            Principal: "*"
            Action:
              - s3:*
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${s3bucket}
              - !Sub arn:${AWS::Partition}:s3:::${s3bucket}/*
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: Allow TLS 1.2 and above
            Effect: Deny
            Principal: "*"
            Action:
              - s3:*
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${s3bucket}
              - !Sub arn:${AWS::Partition}:s3:::${s3bucket}/*
            Condition:
              NumericLessThan:
                s3:TlsVersion: 1.2
          # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/enable-access-logging.html
          # Consider limiting principle to specific region
          - Sid: Allow ALB logging access regions available as of August 2022 or later
            Effect: Allow
            Principal:
              Service: logdelivery.elasticloadbalancing.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${s3bucket}
              - !Sub arn:${AWS::Partition}:s3:::${s3bucket}/*
          - Sid: Allow ALB logging access regions available before August 2022
            Effect: Allow
            Principal:
              AWS: 
                - arn:aws:iam::127311923021:root #US East (N. Virginia) 
                - arn:aws:iam::033677994240:root #US East (Ohio)
                - arn:aws:iam::027434742980:root #US West (N. California)
                - arn:aws:iam::797873946194:root #US West (Oregon)
                - arn:aws:iam::098369216593:root #Africa (Cape Town)
                - arn:aws:iam::754344448648:root #Asia Pacific (Hong Kong)
                - arn:aws:iam::589379963580:root #Asia Pacific (Jakarta)
                - arn:aws:iam::718504428378:root #Asia Pacific (Mumbai)
                - arn:aws:iam::383597477331:root #Asia Pacific (Osaka)
                - arn:aws:iam::600734575887:root #Asia Pacific (Seoul)
                - arn:aws:iam::114774131450:root #Asia Pacific (Singapore)
                - arn:aws:iam::783225319266:root #Asia Pacific (Sydney)
                - arn:aws:iam::582318560864:root #Asia Pacific (Tokyo) 
                - arn:aws:iam::985666609251:root #Canada (Central) 
                - arn:aws:iam::054676820928:root #Europe (Frankfurt)
                - arn:aws:iam::156460612806:root #Europe (Ireland)
                - arn:aws:iam::652711504416:root #Europe (London)
                - arn:aws:iam::635631232127:root #Europe (Milan)
                - arn:aws:iam::009996457667:root #Europe (Paris) 
                - arn:aws:iam::897822967062:root #Europe (Stockholm)
                - arn:aws:iam::076674570225:root #Middle East (Bahrain)
                - arn:aws:iam::507241528517:root #South America (SÃ£o Paulo)
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${s3bucket}
              - !Sub arn:${AWS::Partition}:s3:::${s3bucket}/*

  ### Resource Group (Scaffold)
  rgg:
    Type: AWS::ResourceGroups::Group
    Properties:
      Description: Microsoft on AWS Adventure Game resources
      Name: !Sub ${PrefixCode}-resources
      ResourceQuery:
        Type: TAG_FILTERS_1_0
        Query:
          ResourceTypeFilters:
            - AWS::AllSupported
          TagFilters:
            - Key: customer
              Values:
                - !Sub ${DepartmentTag}
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-resources
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
        - Key: resourcetype
          Value: scaffold

  ### Amazon VPC (Quest)
  vpc01:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub ${VpcCidr}.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-vpc
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
        - Key: resourcetype
          Value: network
  iarvpcflowlogs:
    Type: AWS::IAM::Role
    # https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-cwl.html
    Properties:
      RoleName: !Sub ${PrefixCode}-iamrole-vpcflowlogs
      Description: Publish flow logs to CloudWatch Logs
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${PrefixCode}-iampolicy-VpcFlowLogsPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: 
                  - "arn:aws:logs:*:*:*"
                Condition:
                  StringEquals:
                    "aws:SourceAccount": !Sub "${AWS::AccountId}"
                  ArnLike:
                    "aws:SourceArn": !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-iamrole-vpcflowlogs
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  cwlvpclogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt kmskey.Arn
      LogGroupName: !Sub ${PrefixCode}-vpcflowlog
      RetentionInDays: 30
  cwlvpcflowlog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt iarvpcflowlogs.Arn
      LogGroupName: !Ref cwlvpclogs
      ResourceId: !Ref vpc01
      ResourceType: VPC
      TrafficType: ALL
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-vpcflowlog
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: monitoring
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources

  ### Amazon VPC Subnets (Quest)
  sbnpb01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc01
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Sub ${VpcCidr}.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-subnet-public1-AvailabilityZone1
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  sbnpb02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc01
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Sub ${VpcCidr}.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-subnet-public2-AvailabilityZone2
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  sbnpv01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc01
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Sub ${VpcCidr}.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-subnet-private1-AvailabilityZone1
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  sbnpv02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc01
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Sub ${VpcCidr}.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-subnet-private2-AvailabilityZone2
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  sbnpv03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc01
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Sub ${VpcCidr}.5.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-subnet-private3-AvailabilityZone1
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  sbnpv04:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc01
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Sub ${VpcCidr}.6.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-subnet-private4-AvailabilityZone2
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources

  ### Internet Gateway (Quest)
  igw01:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-igw
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  igwattach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc01
      InternetGatewayId: !Ref igw01

  ### Elastic IPs (Quest)
  eip01:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-eip-AvailabilityZone1
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  eip02:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-eip-AvailabilityZone2
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources

  ### NAT Gateways (Quest)        
  ngw01:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt eip01.AllocationId
      SubnetId: !Ref sbnpb01
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-nat-public1-AvailabilityZone1
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
    DependsOn: igw01
  ngw02:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt eip02.AllocationId
      SubnetId: !Ref sbnpb02
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-nat-public2-AvailabilityZone2
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
    DependsOn: igw01

  ### Route Tables (Quest)
  rttpb01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc01
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-rtb-public
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  pubroute01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rttpb01
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !GetAtt igw01.InternetGatewayId
  pubsubnet01assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sbnpb01
      RouteTableId: !Ref rttpb01
  pubsubnet02assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sbnpb02
      RouteTableId: !Ref rttpb01
  rttpv01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc01
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-rtb-private1-AvailabilityZone1
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  privroute01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rttpv01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !GetAtt ngw01.NatGatewayId
  privsbnassoc01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sbnpv01
      RouteTableId: !Ref rttpv01
  rttpv02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc01
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-rtb-private2-AvailabilityZone2
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  privroute02:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rttpv02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !GetAtt ngw02.NatGatewayId
  privsbnassoc02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sbnpv02
      RouteTableId: !Ref rttpv02
  rttpv03:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc01
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-rtb-private3-AvailabilityZone1
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  privroute03:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rttpv03
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !GetAtt ngw01.NatGatewayId
  privsbnassoc03:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sbnpv03
      RouteTableId: !Ref rttpv03
  rttpv04:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc01
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-rtb-private3-AvailabilityZone2
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: network
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  privroute04:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rttpv04
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !GetAtt ngw02.NatGatewayId
  privsbnassoc04:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sbnpv04
      RouteTableId: !Ref rttpv04

  ### Security Groups (Quest)
  scgweb01:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${PrefixCode}-securitygroup-web
      GroupDescription: web tier security group
      VpcId: !Ref vpc01
      SecurityGroupIngress:
        - Description: HTTP inbound
          IpProtocol: tcp
          # Consider setting FromPort and ToPort to 443 for production environments
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: HTTPS inbound
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: allow all traffic outbound
          IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-securitygroup-web
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  scgapp01:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${PrefixCode}-securitygroup-app
      GroupDescription: application tier security group
      VpcId: !Ref vpc01
      SecurityGroupIngress:
        - Description: HTTPS inbound from web tier
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref scgweb01
      SecurityGroupEgress:
        - Description: allow all traffic outbound
          IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-securitygroup-app
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  scgapp01RDP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow RDP traffic from app tier
      GroupId: !GetAtt scgapp01.GroupId
      IpProtocol: tcp
      FromPort: 3389
      ToPort: 3389
      SourceSecurityGroupId: !Ref scgapp01
  scgdat01:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${PrefixCode}-securitygroup-data
      GroupDescription: data tier security group
      VpcId: !Ref vpc01
      SecurityGroupIngress:
        - Description: Allow SQL traffic from app tier
          IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          SourceSecurityGroupId: !Ref scgapp01
        - Description: Allow SMB traffic from app tier
          IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          SourceSecurityGroupId: !Ref scgapp01
      SecurityGroupEgress:
        - Description: allow all traffic outbound
          IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-securitygroup-data
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources

  ### AWS Managed Microsoft AD (Quest)
  smsmmad01:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${PrefixCode}-secret-domain-admin
      Description: Temporary Microsoft Managed AD domain administrator credentials
      KmsKeyId: !GetAtt kmskey.Arn
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "Admin","domain": "${WindowsDomain}"}'
        GenerateStringKey: password
        PasswordLength: 12
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-secret-domain-admin
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  smsmmad01ridealong:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${RideAlongCode}-secret-domain-admin
      Description: Temporary Microsoft Managed AD domain administrator credentials
      KmsKeyId: !GetAtt kmskey.Arn
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "Admin","domain": "${RideAlongCode}"}'
        GenerateStringKey: password
        PasswordLength: 12
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true
      Tags:
        - Key: Name
          Value: !Sub ${RideAlongCode}-secret-domain-admin
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${RideAlongCode}-resources
  mad01:
    Type: AWS::DirectoryService::MicrosoftAD
    Properties:
      Name: !Sub ${WindowsDomain}
      Edition: Standard
      Password: !Sub "{{resolve:secretsmanager:${PrefixCode}-secret-domain-admin:SecretString:password}}"
      VpcSettings:
        SubnetIds:
          - !Ref sbnpv03
          - !Ref sbnpv04
        VpcId: !Ref vpc01
    DependsOn: smsmmad01

  ### DHCP Scope (Scaffold)
  dhcpscope01:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Sub ${WindowsDomain}
      DomainNameServers: !GetAtt mad01.DnsIpAddresses
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-dhcp-${WindowsDomain}
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: networking
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  dhcpscopeassoc01:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref vpc01
      DhcpOptionsId: !Ref dhcpscope01

  ### AWS Systems Manager Documents (Scaffold)    
  ssmdomainjoin:
    Type: "AWS::SSM::Document"
    Properties:
      Name: !Sub ${PrefixCode}-systemmanagerdoc-domainjoin
      DocumentType: "Command"
      Content:
        schemaVersion: "2.2"
        description: "Join instances to domain based on tag"
        mainSteps:
          - action: "aws:domainJoin"
            name: "domainJoin"
            inputs:
              directoryId: !Ref mad01
              directoryName: !Sub ${WindowsDomain}
              dnsIpAddresses: !GetAtt mad01.DnsIpAddresses
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-systemmanagerdoc-domainjoin
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: automation
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  ssmdomainjoinassoc:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref ssmdomainjoin
      Targets:
        - Key: "tag:domainjoin"
          Values:
            - "true"
  iarrdsauth01:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${PrefixCode}-iamrole-rdstomadauthentication
      Description: Allows Amazon RDS to make calls to Directory Service
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - rds.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonRDSDirectoryServiceAccess
      Path: /
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-iamrole-rdstomadauthentication
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources

  ### Amazon RDS for SQL Server (Quest)
  smssqladmin:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${RideAlongCode}-secret-sql-admin
      Description: RideAlong Microsoft Active Directory SQL admin account and RideAlong RDS for SQL server password
      KmsKeyId: !GetAtt kmskey.Arn
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "sqladmin","domain": "${WindowsDomain}"}'
        GenerateStringKey: password
        PasswordLength: 12
        ExcludeCharacters: '"@/\&<>;,[]{}()?*=!''`'
        RequireEachIncludedType: true
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-secret-sql-admin
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  rdsmonitoringrole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${PrefixCode}-iamrole-rdsmonitoring
      Description: Provides access to Cloudwatch for RDS Enhanced Monitoring
      ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'monitoring.rds.amazonaws.com'
          Action: 'sts:AssumeRole'
  sbgrdsmssql01:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Subnet group used by RDS for SQL Server
      DBSubnetGroupName: !Sub ${PrefixCode}-rds-dbsubnetgroup
      SubnetIds:
        - !Ref sbnpv03
        - !Ref sbnpv04
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-rds-dbsubnetgroup
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: networking
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  rdsmssql01:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "30"
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 1
      DBInstanceClass: db.t3.xlarge
      DBInstanceIdentifier: !Sub ${PrefixCode}-rdssql-01
      DBSubnetGroupName: !Ref sbgrdsmssql01
      DeleteAutomatedBackups: true
      # Consider setting DeletionProtection to true for production environments
      DeletionProtection: false
      Domain: !Ref mad01
      DomainIAMRoleName: !Ref iarrdsauth01
      EnableCloudwatchLogsExports:
        - "error"
      EnablePerformanceInsights: true
      Engine: sqlserver-ee
      EngineVersion: 15.00.4236.7.v1
      LicenseModel: license-included
      ManageMasterUserPassword : true
      MasterUsername: sqlsa
      MaxAllocatedStorage: 50
      MonitoringInterval : 60
      MonitoringRoleArn : !GetAtt rdsmonitoringrole.Arn
      MultiAZ: true
      PubliclyAccessible: false
      StorageEncrypted: true
      StorageType: gp3
      VPCSecurityGroups:
        - !Ref scgdat01
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-rds-mssql-01
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: database
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
    # Consider changing or deleting the UpdateReplacePolicy for production environments
    UpdateReplacePolicy: Delete

  ### Amazon FSx for Windows File Server (Quest)
  cwlfsxlogs:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt kmskey.Arn
      LogGroupName: !Sub "/aws/fsx/${PrefixCode}-fsxauditlogs"
      RetentionInDays: 30
  fsxmmadsingaz:
    Type: AWS::FSx::FileSystem
    Properties:
      FileSystemType: WINDOWS
      StorageCapacity: 32
      StorageType: SSD
      SubnetIds:
        - !Ref sbnpv03
      SecurityGroupIds:
        - !Ref scgdat01
      WindowsConfiguration:
        ActiveDirectoryId: !Ref mad01
        ThroughputCapacity: 32
        Aliases:
          - !Sub fsx.${WindowsDomain}
        WeeklyMaintenanceStartTime: "6:03:00"
        DailyAutomaticBackupStartTime: "01:00"
        AutomaticBackupRetentionDays: 30
        DeploymentType: SINGLE_AZ_2
        CopyTagsToBackups: false
        AuditLogConfiguration:
          FileAccessAuditLogLevel: "FAILURE_ONLY"
          FileShareAccessAuditLogLevel: "FAILURE_ONLY"
          AuditLogDestination: !Select [0, !Split [':*', !GetAtt cwlfsxlogs.Arn]]
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-storage-fsxw
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: storage
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources

  ### AWS Identity and Access Management (IAM) (Scaffold)
  iarec2admin:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${PrefixCode}-iamrole-ec2admin
      Description: Workshop EC2 instance profile role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${PrefixCode}-iampolicy-ec2describe
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource:
                  - '*'
        # https://docs.aws.amazon.com/systems-manager/latest/userguide/security_iam_service-with-iam.html
        - PolicyName: !Sub ${PrefixCode}-iampolicy-ec2ssm
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - ssm:StartSession
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*
                  - !Sub arn:aws:ssm:${AWS::Region}::document/AWS-StartPortForwardingSession
        - PolicyName: !Sub ${PrefixCode}-iampolicy-ec2secrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref smsmmad01
                  - !Ref smssqladmin
                  - !Ref smsapppoolsvc01
                  - !Ref smsworkspaces
                  - !GetAtt rdsmssql01.MasterUserSecret.SecretArn
        - PolicyName: !Sub ${PrefixCode}-iampolicy-ec2toS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${S3SourceBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${S3SourceBucket}/*
        - PolicyName: !Sub ${PrefixCode}-iampolicy-kmskey
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !GetAtt kmskey.Arn
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMDirectoryServiceAccess
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-iamrole-ec2admin
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  iapec2admin:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${PrefixCode}-iamprofile-ec2admin
      Roles:
        - !Ref iarec2admin

  ### Amazon WorkSpaces (Side Quest)
  smsworkspaces:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${PrefixCode}-secret-workspaces-user
      Description: Amazon WorkSpaces user 
      KmsKeyId: !GetAtt kmskey.Arn
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "citizen","domain": "${PrefixCode}"}'
        GenerateStringKey: password
        PasswordLength: 12
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-secret-domain-admin
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${RideAlongCode}-resources

  ### EC2 Key Pair (Scaffold)
  ec2keypair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub ${PrefixCode}-ec2-keypair
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-ec2-keypair
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources

  ### Amazon EC2 Adminbox User Data (Scaffold)
  smpec2adminuserdata:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub ${PrefixCode}ssmparameter-adminserver-userdata
      Description: UserData for Adminbox EC2 instance. This mechanism is used to facilitate workshop deployment. In a customer environment, UserData can be specified directly in EC2
      Tier: Advanced
      Type: String
      Value: !Sub |
        <powershell>
        # Script Log
        Start-Transcript -Path "C:\UserData.log" -Append
        Write-Output "LOG: START OF EXECUTION"
        # Install/upgrade SSM Agent
        if (-not (Test-Path C:\SSMAgent_latest.exe)) {
          Write-Output "LOG: Installing/upgrading SSM Agent"
          [System.Net.ServicePointManager]::SecurityProtocol = 'TLS12'
          (New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe", "C:\SSMAgent_latest.exe")
          Start-Process -FilePath "C:\SSMAgent_latest.exe" -ArgumentList "/S" -Wait
        }
        # Install/upgrade SSM Agent Session Manager Plugin
        if (-not (Test-Path C:\SessionManagerPluginSetup.exe)) {
          (New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/session-manager-downloads/plugin/latest/windows/SessionManagerPluginSetup.exe", "C:\SessionManagerPluginSetup.exe")
          Start-Process C:\SessionManagerPluginSetup.exe -ArgumentList @("/q", "/log", "install.log") -Wait
        }
        # Disable IE ESC
        $IEESCRegKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
        if ((Test-Path -Path $IEESCRegKey) -and ((Get-ItemPropertyValue -Path $IEESCRegKey -Name "IsInstalled") -ne 0)) {
            Write-Output "LOG: Disabling Internet Explorer ESC"
            Set-ItemProperty -Path $IEESCRegKey -Name "IsInstalled" -Value 0
          }
        # Install AWSCLIv2
        if (-not (Test-Path "C:\Program Files\Amazon\AWSCLIV2\aws.exe")) {
          Write-Output "LOG: Intalling AWSCLIv2"
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "https://awscli.amazonaws.com/AWSCLIV2.msi", "/quiet" -Wait
          }
        # Install Amazon WorkSpaces Client
        if (-not (Test-Path "C:\Program Files\Amazon Web Services, Inc\Amazon WorkSpaces")) {
          Write-Output "LOG: Installing Amazon WorkSpaces Client"
          msiexec /i "https://d2td7dqidlhjx7.cloudfront.net/prod/global/windows/Amazon+WorkSpaces.msi" /qn ALLUSERS="1"
        }
        # Install Admin tools
        if ((Get-WindowsFeature RSAT).installed -ne 'True') {
            Write-Output "LOG: installing admin tools"
            Install-WindowsFeature -Name RSAT -IncludeAllSubFeature
        }
        # Install Chocolatey
        if (-not (Test-Path C:\ProgramData\\chocolatey)) {
          Write-Output "LOG: installing Chocolatey"
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        # Install SQL Management Tools
        $Software = "SQL Server Management Studio"
        $Installed = $null -ne (Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | Where-Object { $_.DisplayName -eq $Software })
        if (-not $installed) {
          Write-Output "LOG: installing SQL Management Tools"
          C:\ProgramData\\chocolatey\choco install sql-server-management-studio -y
        }
        # Join MMAD Domain
        if ((Get-WmiObject win32_computersystem).partofdomain -eq $false)  {
          $FetchedSecret = ConvertFrom-Json -InputObject (Get-SECSecretValue -SecretId ${smsmmad01}).SecretString
          $Credentials = (New-Object PSCredential($FetchedSecret.username,(ConvertTo-SecureString $FetchedSecret.password -AsPlainText -Force)))
          Rename-Computer -NewName ${AdminBoxName}
          Start-Sleep -Seconds 5
          Write-Output "LOG: Joining Active Directory Domain"
          Add-Computer -DomainName ${WindowsDomain} -Credential $Credentials -force -Options JoinWithNewName,AccountCreate -restart
        }
        # Create Active Directory user accounts
        if (-not (get-aduser -filter "samaccountname -eq 'sqladmin'")) {
          Write-Output "LOG: Creating AD user accounts"
          $FetchedSecret = ConvertFrom-Json -InputObject (Get-SECSecretValue -SecretId ${smsmmad01}).SecretString
          $Credentials = (New-Object PSCredential($FetchedSecret.username,(ConvertTo-SecureString $FetchedSecret.password -AsPlainText -Force)))
          $sqladminFetchedSecret = (Get-SECSecretValue -SecretId ${smssqladmin}).SecretString | ConvertFrom-Json
          $apppoolsvcFetchedSecret = (Get-SECSecretValue -SecretId ${smsapppoolsvc01}).SecretString | ConvertFrom-Json
          $workspacesFetchedSecret = (Get-SECSecretValue -SecretId ${smsworkspaces}).SecretString | ConvertFrom-Json
          do {
                New-ADUser -Name $apppoolsvcFetchedSecret.username -Description "IIS App pool user account" -Enabled $true -AccountPassword (ConvertTo-SecureString $apppoolsvcFetchedSecret.password -AsPlainText -Force) -Credential $Credentials
                New-ADUser -Name $workspacesFetchedSecret.username -Description "Amazon WorkSpaces user account" -Enabled $true -AccountPassword (ConvertTo-SecureString $workspacesFetchedSecret.password -AsPlainText -Force) -Credential $Credentials
                New-ADUser -Name $sqladminFetchedSecret.username -Description "SQL admin account" -Enabled $true -AccountPassword (ConvertTo-SecureString $sqladminFetchedSecret.password -AsPlainText -Force) -Credential $Credentials
              } 
          until (get-aduser -filter "samaccountname -eq 'sqladmin'")
          New-Item -Path \\${fsxmmadsingaz.DNSName}\share\AppPoolSignal.token -ItemType File -Force
        }
        # Create App Pool Windows integrated SQL login
        if (-not (Test-Path "c:\share\AppPoolComplete.token")) {
          Write-Output "LOG: Creating App Pool Windows Integrated SQL login"
          # Install SQL Server PowerShell Module
          Install-PackageProvider -Name NuGet -Force
          Install-Module -Name SqlServer -Force
          # Amazon RDS for SQL Server connection parameters
          $serverInstance = "${rdsmssql01}"
          $sqlsaFetchedUsername = (Get-SECSecretValue -SecretId ${rdsmssql01.MasterUserSecret.SecretArn}).SecretString | ConvertFrom-Json | Select-Object -ExpandProperty username
          $sqlsaFetchedpassword = (Get-SECSecretValue -SecretId ${rdsmssql01.MasterUserSecret.SecretArn}).SecretString | ConvertFrom-Json | Select-Object -ExpandProperty password
          $apppoolsvcFetchedusername = (Get-SECSecretValue -SecretId ${smsapppoolsvc01}).SecretString | ConvertFrom-Json | Select-Object -ExpandProperty username
          $newsqluser = "${WindowsDomain}".Split(".")[0] + "\" + $apppoolsvcFetchedusername
          # Create Windows integrated SQL login
          $sqlCommand = "CREATE LOGIN [$newsqluser] FROM WINDOWS;GRANT CREATE ANY DATABASE TO [$newsqluser]"
          $connectionString = "Server=$serverInstance;Database=MASTER;User ID=$sqlsaFetchedUsername;Password=$sqlsaFetchedpassword;TrustServerCertificate=True;"
          Invoke-SqlCmd -ConnectionString $connectionString -Query $sqlCommand
          New-Item -Path 'c:\share\AppPoolComplete.token' -ItemType File -Force
        }
        # Useful Locations
        Write-Output "Log locations"
        Write-Output "C:\Windows\System32\config\systemprofile\AppData\Local\Temp"
        Write-Output "C:\ProgramData\Amazon\EC2Launch\log\"
        # Stop logging
        Stop-Transcript
        </powershell>
        <persist>true</persist>
      Tags:
        Name: !Sub ${PrefixCode}ssmparameter-adminserver-userdata
        provisioner: CFN
        workshop: !Sub ${WorkShopTag}
        resourcetype: automation
        customer: !Sub ${DepartmentTag}
        environment: !Sub ${EnvironmentTag}
        codeblock: !Sub ${PrefixCode}-resources

  ### Amazon EC2 Adminbox (Quest)
  ec2srv01:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3a.large
      KeyName: !Ref ec2keypair
      SubnetId: !Ref sbnpv01
      IamInstanceProfile: !Ref iapec2admin
      Monitoring: true
      PrivateIpAddress: !Sub ${VpcCidr}.3.100
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            # Consider setting DeleteOnTermination to false in production environments
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: alias/aws/ebs
            VolumeSize: 100
            VolumeType: gp3
            Iops: 3000
      SecurityGroupIds:
        - !Ref scgapp01
      Tags:
        - Key: Name
          Value: !Sub ${AdminBoxName}
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: compute
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
      # Uses SSM parameter to pull data; for workshop only. In live environments, UserData can be specified directly without the use of SSM
      UserData:
        Fn::Base64: !Sub
          - |
              ${UserData}
          - UserData: !GetAtt smpec2adminuserdata.Value
    DependsOn:
      - mad01
      - rdsmssql01
      - fsxmmadsingaz
    Condition: Deployall

  ### Amazon EC2 File Server (Quest)
  ec2filesrv01:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3a.xlarge
      KeyName: !Ref ec2keypair
      SubnetId: !Ref sbnpv02
      IamInstanceProfile: !Ref iapec2admin
      Monitoring: true
      PrivateIpAddress: !Sub ${VpcCidr}.4.100
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            # Consider setting DeleteOnTermination to false in production environments
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: alias/aws/ebs
            VolumeSize: 30
            VolumeType: gp3
            Iops: 3000
      SecurityGroupIds:
        - !Ref scgapp01
      Tags:
        - Key: Name
          Value: !Sub ${SourceServerName}
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: compute
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          # Script Log
          Start-Transcript -Path "C:\UserData.log" -Append
          Write-Output "LOG: START OF EXECUTION"
          # Install/upgrade SSM Agent
          if (-not (Test-Path C:\SSMAgent_latest.exe)) {
            Write-Output "LOG: Installing/upgrading SSM Agent"
            [System.Net.ServicePointManager]::SecurityProtocol = 'TLS12'
            (New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe", "C:\SSMAgent_latest.exe")
            Start-Process -FilePath "C:\SSMAgent_latest.exe" -ArgumentList "/S" -Wait
          }
          # Install/upgrade SSM Agent Session Manager Plugin
          if (-not (Test-Path C:\SessionManagerPluginSetup.exe)) {
            (New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/session-manager-downloads/plugin/latest/windows/SessionManagerPluginSetup.exe", "C:\SessionManagerPluginSetup.exe")
            Start-Process C:\SessionManagerPluginSetup.exe -ArgumentList @("/q", "/log", "install.log") -Wait
          }
          # Disable IE ESC
          $IEESCRegKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
          if ((Test-Path -Path $IEESCRegKey) -and ((Get-ItemPropertyValue -Path $IEESCRegKey -Name "IsInstalled") -ne 0)) {
              Write-Output "LOG: Disabling Internet Explorer ESC"
              Set-ItemProperty -Path $IEESCRegKey -Name "IsInstalled" -Value 0
            }
          # Install AWSCLIv2
          if (-not (Test-Path "C:\Program Files\Amazon\AWSCLIV2\aws.exe")) {
            Write-Output "LOG: Intalling AWSCLIv2"
            Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "https://awscli.amazonaws.com/AWSCLIV2.msi", "/quiet" -Wait
            }
          # Install Admin tools
          if ((Get-WindowsFeature RSAT).installed -ne 'True') {
              Write-Output "LOG: installing admin tools"
              Install-WindowsFeature -Name RSAT -IncludeAllSubFeature
          }
          # Join MMAD Domain
          if ((Get-WmiObject win32_computersystem).partofdomain -eq $false)  {
            $FetchedSecret = ConvertFrom-Json -InputObject (Get-SECSecretValue -SecretId ${smsmmad01}).SecretString
            $Credentials = (New-Object PSCredential($FetchedSecret.username,(ConvertTo-SecureString $FetchedSecret.password -AsPlainText -Force)))
            Rename-Computer -NewName ${SourceServerName}
            Start-Sleep -Seconds 5
            Write-Output "LOG: Joining Active Directory Domain"
            Add-Computer -DomainName ${WindowsDomain} -Credential $Credentials -force -Options JoinWithNewName,AccountCreate -restart
          }
          # Useful Locations
          Write-Output "Log locations"
          Write-Output "C:\Windows\System32\config\systemprofile\AppData\Local\Temp"
          Write-Output "C:\ProgramData\Amazon\EC2Launch\log\"
          # Stop logging
          Stop-Transcript
          </powershell>
          <persist>true</persist>
    DependsOn:
      - mad01
      - fsxmmadsingaz

  ### Amazon Elastic Load Balancer (Quest)
  alb01:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${PrefixCode}-loadbalancer-web
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref scgweb01
      Subnets:
        - !Ref sbnpb01
        - !Ref sbnpb02
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref s3bucket
        - Key: access_logs.s3.prefix
          Value: loadbalancer-web
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-loadbalancer-web
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: networking
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
    Condition: Deployall
  ltg01:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${PrefixCode}-targetgroup-web
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref vpc01
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "86400"
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-targetgroup-web
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: networking
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
    Condition: Deployall
  listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref alb01
      # Consider setting Port to 443 and Protocol to HTTPS for production environments
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ltg01
    Condition: Deployall

  ### Web Server foundation (Scaffold)
  smsapppoolsvc01:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${PrefixCode}-secret-apppoolsvc
      Description: Temporary credentials for web server default app pool identity
      KmsKeyId: !GetAtt kmskey.Arn
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "svcapppool","domain": "${WindowsDomain}"}'
        GenerateStringKey: password
        PasswordLength: 12
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true
      Tags:
        - Key: Name
          Value: !Sub ${PrefixCode}-secret-apppoolsvc
        - Key: provisioner
          Value: CFN
        - Key: workshop
          Value: !Sub ${WorkShopTag}
        - Key: resourcetype
          Value: security
        - Key: customer
          Value: !Sub ${DepartmentTag}
        - Key: environment
          Value: !Sub ${EnvironmentTag}
        - Key: codeblock
          Value: !Sub ${PrefixCode}-resources
  smpec2webuserdata:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub ${PrefixCode}ssmparameter-webserver-userdata
      Description: UserData for Web Server Launch Template. This mechanism is used to facilitate workshop deployment. In a customer environment, UserData can be specified directly in Launchtemplate
      Tier: Advanced
      Type: String
      Value: !Sub |
        <powershell>
        # Script Log
        Start-Transcript -Path "C:\UserData.log" -Append
        Write-Output "LOG: START OF EXECUTION"
        # Install/upgrade SSM Agent
        if (-not (Test-Path C:\SSMAgent_latest.exe)) {
            Write-Output "LOG: Installing/upgrading SSM Agent"
            [System.Net.ServicePointManager]::SecurityProtocol = 'TLS12'
            (New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe", "C:\SSMAgent_latest.exe")
            Start-Process -FilePath "C:\SSMAgent_latest.exe" -ArgumentList "/S" -Wait
        }
        # Wait for domain join before continue
        do {
          $checkdomainjoinedstatus = (Get-WmiObject win32_computersystem).partofdomain
          Write-Output "LOG: Waiting for instance to join AD domain..."
          Start-Sleep -Seconds 10
        }
        until ($checkdomainjoinedstatus -eq 'True')
        Write-Output "LOG: Instance has been joined to AD domain!"
        # Install/upgrade SSM Agent Session Manager Plugin
        if (-not (Test-Path C:\SessionManagerPluginSetup.exe)) {
          (New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/session-manager-downloads/plugin/latest/windows/SessionManagerPluginSetup.exe", "C:\SessionManagerPluginSetup.exe")
          Start-Process C:\SessionManagerPluginSetup.exe -ArgumentList @("/q", "/log", "install.log") -Wait
        }
        # Disable IE ESC
        $IEESCRegKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
        if ((Test-Path -Path $IEESCRegKey) -and ((Get-ItemPropertyValue -Path $IEESCRegKey -Name "IsInstalled") -ne 0)) {
            Write-Output "LOG: Disabling Internet Explorer ESC"
            Set-ItemProperty -Path $IEESCRegKey -Name "IsInstalled" -Value 0
          }
        # Install AWSCLIv2
        if (-not (Test-Path "C:\Program Files\Amazon\AWSCLIV2\aws.exe")) {
          Write-Output "LOG: Intalling AWSCLIv2"
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "https://awscli.amazonaws.com/AWSCLIV2.msi", "/quiet" -Wait
          }
        # Install IIS Web Services
        if ((Get-WindowsFeature Web-Mgmt-Console).installed -ne 'True') {
            Write-Output "LOG: Installing IIS Web Services"
            Install-WindowsFeature Web-Common-Http,Web-Http-Logging,Web-Http-Redirect,Web-Dyn-Compression,Web-Net-Ext45,Web-Asp-Net45,Web-ISAPI-Ext,Web-ISAPI-Filter,Web-Scripting-Tools,Web-Mgmt-Console
          }
        # Copy Webserver files
        Write-Output "LOG: Copying web server files"
        C:\PROGRA~1\Amazon\AWSCLIV2\aws s3 sync s3://${S3SourceBucket} C:\inetpub\microsoftadventuregame
        (Get-Content C:\inetpub\microsoftadventuregame\Web.config) -Replace '<AMAZONRDSSQLSERVER>', '${rdsmssql01}' | Set-Content C:\inetpub\microsoftadventuregame\Web.config
        # Configure Web Server local settings
        if (Test-Path C:\inetpub\microsoftadventuregame) {
          Write-Output "LOG: Configuring webserver local settings"
          # Set permissions and create website
          icacls "C:\INETPUB\microsoftadventuregame" /grant "IIS_IUSRS:(OI)(CI)(RX)"
          Set-WebBinding -Name "Default Web Site" -BindingInformation "*:80:" -PropertyName "Port" -Value "81"
          New-IISSite -Name "microsoftadventuregame" -BindingInformation "*:80:" -PhysicalPath "$env:systemdrive\inetpub\microsoftadventuregame"
          # Configure self-signed SSL
          Write-Output "LOG: Configuring self-signed Certificate"
          $Certificate = New-SelfSignedCertificate -FriendlyName microsoftadventuregame -DnsName "${WindowsDomain}" -CertStoreLocation "Cert:\LocalMachine\My"
          New-WebBinding -Name microsoftadventuregame -IP "*" -Port 443 -Protocol https
          get-item cert:\LocalMachine\MY\$Certificate.Thumbprint | new-item 0.0.0.0!443
          (Get-WebBinding -Name microsoftadventuregame -Protocol "https").AddSslCertificate($Certificate.GetCertHashString(), "my")
          }
        # Configure Web Server domain settings
        if ((Get-WmiObject Win32_ComputerSystem | Select-Object -ExpandProperty Domain) -eq "${WindowsDomain}") {
        Write-Output "LOG: Configuring webserver domain settings"
          # Check App Pool AD User account created
          do {
              $checkstatus = test-path \\${fsxmmadsingaz.DNSName}\share\AppPoolSignal.token
              Write-Output "LOG: Waiting for App Pool AD User account creation..."
              Start-Sleep -Seconds 10
          }
          until ($checkstatus -eq 'True')
          # Configure AppPool Service login
          $FetchedSecretAppPool = (Get-SECSecretValue -SecretId ${smsapppoolsvc01}).SecretString | ConvertFrom-Json
          Import-Module WebAdministration
          Set-ItemProperty IIS:\AppPools\DefaultAppPool -name processModel -value @{userName=$FetchedSecretAppPool.domain + '\' + $FetchedSecretAppPool.username;password=$FetchedSecretAppPool.password;identitytype=3}
          Start-WebAppPool -Name "DefaultAppPool"
          Write-Output "LOG: App Pool Started!"
          }
        # Useful Locations
        Write-Output "Log locations"
        Write-Output "C:\Windows\System32\config\systemprofile\AppData\Local\Temp"
        Write-Output "C:\ProgramData\Amazon\EC2Launch\log\"
        # Stop logging
        Stop-Transcript
        </powershell>
        <persist>true</persist>
      Tags:
        Name: !Sub ${PrefixCode}ssmparameter-webserver-userdata
        provisioner: CFN
        workshop: !Sub ${WorkShopTag}
        resourcetype: automation
        customer: !Sub ${DepartmentTag}
        environment: !Sub ${EnvironmentTag}
        codeblock: !Sub ${PrefixCode}-resources

  ### Amazon EC2 Auto Scaling Group (Quest)
  ltpwebserver:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${PrefixCode}-launchtemplate-webservers
      VersionDescription: Launch Template for Windows IIS Web server Auto Scaling Group v1.0
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t3a.medium
        KeyName: !Ref ec2keypair
        SecurityGroupIds:
          - !Ref scgapp01
        EbsOptimized: true
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              KmsKeyId: alias/aws/ebs
              VolumeSize: 80
              VolumeType: gp3
        IamInstanceProfile:
          Name: !Ref iapec2admin
        Monitoring:
          Enabled: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${PrefixCode}-ec2-webserver
              - Key: provisioner
                Value: CFN
              - Key: workshop
                Value: !Sub ${WorkShopTag}
              - Key: resourcetype
                Value: compute
              - Key: customer
                Value: !Sub ${DepartmentTag}
              - Key: environment
                Value: !Sub ${EnvironmentTag}
              - Key: codeblock
                Value: !Sub ${PrefixCode}-resources
              - Key: domainjoin
                Value: 'true'
        # Uses SSM parameter to pull data; for workshop only. In live environments, UserData can be specified directly without the use of SSM
        UserData:
          Fn::Base64: !Sub
            - |
                ${UserData}
            - UserData: !GetAtt smpec2webuserdata.Value
    Condition: Deployall
  asgwebserver:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${PrefixCode}-autoscalinggroup-webserver
      LaunchTemplate:
        LaunchTemplateName: !Sub ${PrefixCode}-launchtemplate-webservers
        Version: !GetAtt ltpwebserver.LatestVersionNumber
      MinSize: "2"
      MaxSize: "4"
      DesiredCapacity: "2"
      TargetGroupARNs:
        - !Ref ltg01
      VPCZoneIdentifier:
        - !Ref sbnpv01
        - !Ref sbnpv02
      Cooldown: "60"
    DependsOn:
      - mad01
      - rdsmssql01
      - fsxmmadsingaz
      - ec2srv01
    Condition: Deployall
  aspwebserver:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: TargetTrackingScaling
      EstimatedInstanceWarmup: 100
      AutoScalingGroupName: !Ref asgwebserver
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 90.0
    Condition: Deployall

  ### Create SSM document to map FSxW file share as drive on Windows servers
  ssmdoc: 
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 'Map FSxW file share as drive on Windows servers'
        parameters: 
          secret:
            type: String
            default: !Sub ${smsmmad01}
          fsxwdnsname:
            type: String
            default: !GetAtt fsxmmadsingaz.DNSName
        mainSteps:
        - action: aws:runPowerShellScript
          name: runCommands
          precondition:
            StringEquals:
            - platformType
            - Windows
          inputs:
            timeoutSeconds: '600'
            runCommand:
            - $FetchedSecretPassword = ConvertFrom-Json -InputObject (Get-SECSecretValue -SecretId {{secret}}).SecretString | Select-Object -ExpandProperty password
            - $FetchedSecretUsername = ConvertFrom-Json -InputObject (Get-SECSecretValue -SecretId {{secret}}).SecretString | Select-Object -ExpandProperty username
            - $FetchedSecretDomain = ConvertFrom-Json -InputObject (Get-SECSecretValue -SecretId {{secret}}).SecretString | Select-Object -ExpandProperty domain
            - "net use y: \\\\{{fsxwdnsname}}\\share /user:$FetchedSecretDomain\\$FetchedSecretUsername  $FetchedSecretPassword /persistent:yes"
      DocumentFormat: YAML
      DocumentType: Command
      Name: 'mag_map_fsx'

  ### Association for 'mag_map_fsx' SSM document
  Association:
    Type: AWS::SSM::Association
    Properties:
      Name: mag_map_fsx
      ScheduleExpression: rate(30 minutes)
      Targets:
      - Key: tag:workshop
        Values:
        - "mag"
    DependsOn:
      - ssmdoc